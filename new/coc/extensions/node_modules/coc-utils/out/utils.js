"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const coc_nvim_1 = require("coc.nvim");
const coc_nvim_2 = require("coc.nvim");
const follow_redirects_1 = require("follow-redirects");
function fileURLToPath(x) {
    return coc_nvim_2.Uri.parse(x).fsPath;
}
exports.fileURLToPath = fileURLToPath;
function sleep(ms) {
    return new Promise((resolve, __) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
function ensurePathExists(targetPath) {
    // Ensure that the path exists
    try {
        fs.mkdirSync(targetPath);
    }
    catch (e) {
        // If the exception isn't to indicate that the folder exists already, rethrow it.
        if (e.code !== "EEXIST") {
            throw e;
        }
    }
}
exports.ensurePathExists = ensurePathExists;
function getPipePath(pipeName) {
    if (os.platform() === "win32") {
        return "\\\\.\\pipe\\" + pipeName;
    }
    else {
        // Windows uses NamedPipes where non-Windows platforms use Unix Domain Sockets.
        // This requires connecting to the pipe file in different locations on Windows vs non-Windows.
        return path.join(os.tmpdir(), `CoreFxPipe_${pipeName}`);
    }
}
exports.getPipePath = getPipePath;
function checkIfFileExists(filePath) {
    try {
        fs.accessSync(filePath, fs.constants.R_OK);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.checkIfFileExists = checkIfFileExists;
function getTimestampString() {
    const time = new Date();
    return `[${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}]`;
}
exports.getTimestampString = getTimestampString;
function isWindowsOS() {
    return os.platform() === "win32";
}
exports.isWindowsOS = isWindowsOS;
function getCurrentSelection(mode) {
    return __awaiter(this, void 0, void 0, function* () {
        let doc = yield coc_nvim_1.workspace.document;
        if (mode === "v" || mode === "V") {
            let [from,] = yield doc.buffer.mark("<");
            let [to,] = yield doc.buffer.mark(">");
            let result = [];
            for (let i = from; i <= to; ++i) {
                result.push(doc.getline(i - 1));
            }
            return result;
        }
        else if (mode === "n") {
            let line = yield coc_nvim_1.workspace.nvim.call('line', '.');
            return [doc.getline(line - 1)];
        }
        else if (mode === "i") {
            // TODO what to do in insert mode?
        }
        else if (mode === "t") {
            //TODO what to do in terminal mode?
        }
        return [];
    });
}
exports.getCurrentSelection = getCurrentSelection;
function httpsGet(url, cb) {
    return new Promise((resolve, reject) => {
        const req = follow_redirects_1.https.request(url, (res) => {
            if (res.statusCode != 200) {
                reject(new Error(`Invalid response from ${JSON.stringify(url)}: ${res.statusCode}`));
                return;
            }
            cb(resolve, reject, res);
        });
        req.setHeader('user-agent', 'coc.nvim');
        req.on('error', reject);
        req.end();
    });
}
exports.httpsGet = httpsGet;
function httpsGetJson(url) {
    return httpsGet(url, (resolve, __, response) => {
        let data = '';
        response.on('data', chunk => data += chunk);
        response.on('end', () => {
            resolve(JSON.parse(data));
        });
    });
}
exports.httpsGetJson = httpsGetJson;
//# sourceMappingURL=utils.js.map